name: manager-CI

on:
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  manager-format-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create env file
        env:
          DJANGO_TEST_MANAGER_ENV: ${{ secrets.DJANGO_TEST_MANAGER_ENV }}
        run: |
          touch .env.manager
          echo "$DJANGO_TEST_MANAGER_ENV" >> .env.manager
          mv .env.manager manager_service/

      - name: Move setup.cfg
        run: mv setup.cfg manager_service/

      - name: Build docker
        run: docker compose -f github-actions.docker-compose.yml build postgres-db manager_service

      - name: Run isort
        run: docker compose -f github-actions.docker-compose.yml run manager_service poetry run isort mung_manager/ --check

      - name: Run black
        run: docker compose -f github-actions.docker-compose.yml run manager_service poetry run black mung_manager/ --check

      - name: Run flake8
        run: docker compose -f github-actions.docker-compose.yml run manager_service poetry run flake8

      - name: Run mypy
        run: docker compose -f github-actions.docker-compose.yml run manager_service poetry run mypy --config mypy.ini mung_manager/

      - name: Notify Slack on Success
        if: success()
        id: slack-success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#36a64f",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action manager format-lint CI 성공 😄",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK


      - name: Notify Slack on Failure
        if: failure()
        id: slack-failure
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#ff0000",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action manager format-lint CI 실패 😭",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  manager-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create env file
        env:
          DJANGO_TEST_MANAGER_ENV: ${{ secrets.DJANGO_TEST_MANAGER_ENV }}
        run: |
          touch .env.manager
          echo "$DJANGO_TEST_MANAGER_ENV" >> .env.manager
          mv .env.manager manager_service/

      - name: Build docker
        run: docker compose -f github-actions.docker-compose.yml build postgres-db manager_service

      - name: Run tests
        run:  docker compose -f github-actions.docker-compose.yml run manager_service poetry run pytest --cov=mung_manager --cov-fail-under=80 tests/ -n 4 &&
              docker compose -f github-actions.docker-compose.yml run manager_service poetry run pytest --cov=mung_manager tests/ --cov-report=xml -n 4

      - name: Report coverage to codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Notify Slack on Success
        if: success()
        id: slack-success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#36a64f",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action manager test CI 성공 😄",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK


      - name: Notify Slack on Failure
        if: failure()
        id: slack-failure
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#ff0000",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action manager test CI 실패 😭",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
