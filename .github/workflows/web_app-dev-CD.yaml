run-name: Deploy to AWS dev server by @${{ github.actor }}

on:
  workflow_dispatch:
    permissions:
      users:
        - saJaeHyukc

jobs:
  web_app-test-and-fomat-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create env file
        env:
          DJANGO_TEST_WEB_APP_ENV: ${{ secrets.DJANGO_TEST_WEB_APP_ENV }}
        run: |
          touch .env.web_app
          echo "$DJANGO_TEST_WEB_APP_ENV" >> .env.web_app
          mv .env.web_app web_app/

      - name: Move setup.cfg
        run: mv setup.cfg web_app/

      - name: Build docker
        run: docker compose -f github-actions.docker-compose.yml build postgres web_app

      - name: Run isort
        run: docker compose -f github-actions.docker-compose.yml run web_app poetry run isort mung_manager/ --check

      - name: Run black
        run: docker compose -f github-actions.docker-compose.yml run web_app poetry run black mung_manager/ --check

      - name: Run flake8
        run: docker compose -f github-actions.docker-compose.yml run web_app poetry run flake8

      - name: Run mypy
        run: docker compose -f github-actions.docker-compose.yml run web_app poetry run mypy --config mypy.ini mung_manager/

      - name: Run tests
        run: docker compose -f github-actions.docker-compose.yml run web_app poetry run pytest --cov=mung_manager/ --cov-fail-under=80 tests/ -n 4

  web_app-deploy:
    needs: web_app-test-and-fomat-lint
    runs-on: ubuntu-latest
    steps:
      - name: Connect to SSH and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          key: ${{ secrets.DEV_EC2_KEY }}
          host: ${{ secrets.DEV_EC2_IP }}
          username: ${{ secrets.DEV_EC2_NAME }}
          port: ${{ secrets.DEV_EC2_PORT }}
          script: |
            cd ${{ secrets.DEV_EC2_PATH }}
            git pull origin develop
            sudo docker compose restart web_app, nginx

      - name: Notify Slack on Success
        if: success()
        id: slack-success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#36a64f",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action Admin DEV-CD ì„±ê³µ ðŸ˜„",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify Slack on Failure
        if: failure()
        id: slack-failure
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#ff0000",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action Admin DEV-CD ì‹¤íŒ¨ ðŸ˜­",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
