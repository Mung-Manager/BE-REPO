run-name: Deploy to AWS(Docker Image v.${{ github.event.inputs.docker_image_tag }}) by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      docker_image_tag:
        description: '이전 버전과 다른 상위 버전을 입력해주세요. (ex. 1.0.0)'
        default: '1.0.0'
        required: true
        type: string

    permissions:
      users:
        - saJaeHyukc

env:
  # Django Settings
  DJANGO_TEST_ADMIN_ENV: ${{ secrets.DJANGO_TEST_ADMIN_ENV }}

  # AWS Settings
  AWS_REGION: us-west-2
  DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
  DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}

  # AWS ECR Settings
  ECR_REPOSITORY: mung_manager_dev_admin
  IMAGE_TAG: ${{ github.event.inputs.docker_image_tag }}



jobs:
  # admin-test-and-fomat-lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Create env file
  #       run: |
  #         touch .env.admin
  #         echo "${{ env.DJANGO_TEST_ADMIN_ENV }}" >> .env.admin
  #         mv .env.admin admin/

  #     - name: Move setup.cfg
  #       run: mv setup.cfg admin/

  #     - name: Build docker
  #       run: docker compose -f github-actions.docker-compose.yml build postgres admin

  #     - name: Run isort
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run isort mung_manager/ --check

  #     - name: Run black
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run black mung_manager/ --check

  #     - name: Run flake8
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run flake8

  #     - name: Run mypy
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run mypy --config mypy.ini mung_manager/

  #     - name: Run tests
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run pytest --cov=mung_manager/ --cov-fail-under=80 tests/ -n 4

  admin-deploy:
    runs-on: ubuntu-latest
    # needs: admin-test-and-fomat-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create env file
        run: |
          touch .env.admin
          echo "${{ env.DJANGO_TEST_ADMIN_ENV }}" >> .env.admin
          mv .env.admin admin/

      - name: AWS configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./admin/docker/dev.Dockerfile
          platforms: linux/x86_64
          push: true
          tags: |
            ${{ steps.login-ecr-public.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ steps.login-ecr-public.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      # - name: Build docker file and push to ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ADMIN_ECR_REPOSITORY: mung_manager_dev_admin
      #     WEB_APP_ECR_REPOSITORY: mung_manager_dev_web_app
      #     IMAGE_TAG: ${{ github.event.inputs.docker_image_tag }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ADMIN_ECR_REPOSITORY:$IMAGE_TAG -f ./admin/docker/dev.Dockerfile .
      #     docker push $ECR_REGISTRY/$ADMIN_ECR_REPOSITORY:$IMAGE_TAG
      # docker push $ECR_REGISTRY/$ADMIN_ECR_REPOSITORY:latest
      #     sed -i "s%<WEB_APP_IMAGE>%$ECR_REGISTRY/$WEB_APP_ECR_REPOSITORY:latest%g" ./docker-compose.yml
      #     sed -i "s%<ADMIN_IMAGE>%$ECR_REGISTRY/$ADMIN_ECR_REPOSITORY:latest%g" ./docker-compose.yml
      #     sed -i "s%<DJANGO_SETTINGS_MODULE>%config.django.dev%g" ./docker-compose.yml
      #     touch deploy.sh
      #     echo "#!/bin/bash" >> deploy.sh
      #     echo "aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin $ECR_REGISTRY" >> deploy.sh
      #     echo "sudo docker stop admin" >> deploy.sh
      #     echo "sudo docker rm admin" >> deploy.sh
      #     echo "sudo docker rmi $(sudo docker images | grep $ECR_REGISTRY/$ADMIN_ECR_REPOSITORY | awk '{print $3}')" >> deploy.sh
      #     echo "sudo docker compose -f /home/ubuntu/docker-compose.yml up -d --build admin" >> deploy.sh
      #     echo "sudo docker compose restart nginx" >> deploy.sh

      # - name: Upload to S3
      #   env:
      #     IMAGE_TAG: ${{ github.event.inputs.docker_image_tag }}
      #   run: |
      #     zip -r deploy-$IMAGE_TAG.zip appspec.yml deploy.sh docker-compose.yml ./nginx
      #     aws s3 cp --region ap-northeast-2 --acl private ./deploy-$IMAGE_TAG.zip s3://mung-manager-deploy/dev/

      # - name: Connect to SSH and AWS Deploy
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     key: ${{ secrets.DEV_EC2_KEY }}
      #     host: ${{ secrets.DEV_EC2_IP }}
      #     username: ${{ secrets.DEV_EC2_NAME }}
      #     port: ${{ secrets.DEV_EC2_PORT }}
      #   script: |
      #     cd ${{ secrets.DEV_EC2_PATH }}
      #     aws s3 cp --region ap-northeast-2 s3://mung-manager-deploy/dev/deploy-$IMAGE_TAG.zip .
      #     unzip deploy-$IMAGE_TAG.zip
      #     chmod +x deploy.sh
      #     ./deploy.sh

      - name: Notify Slack on Success
        if: success()
        id: slack-success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#36a64f",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action ADMIN DEV-CD 성공 😄",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify Slack on Failure
        if: failure()
        id: slack-failure
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#ff0000",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action ADMIN DEV-CD 실패 😭",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
