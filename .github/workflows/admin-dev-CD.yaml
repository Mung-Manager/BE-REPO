run-name: Deploy to AWS(Docker Image v.${{ github.event.inputs.docker_image_tag }}) by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      docker_image_tag:
        description: '이전 버전과 다른 상위 버전을 입력해주세요. (ex. 1.0.0)'
        default: '1.0.0'
        required: true
        type: string

    permissions:
      users:
        - saJaeHyukc

env:
  # Django Settings
  DJANGO_TEST_ADMIN_ENV: ${{ secrets.DJANGO_TEST_ADMIN_ENV }}

  # AWS Settings
  DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
  DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}

  # AWS ECR Settingsalias
  ECR_PUBLIC_REGISTRY_ALIAS: ${{ secrets.ECR_PUBLIC_REGISTRY_ALIAS }}
  ADMIN_ECR_REPOSITORY: mung_manager_dev_admin
  WEB_APP_ECR_REPOSITORY: mung_manager_dev_web_app
  IMAGE_TAG: ${{ github.event.inputs.docker_image_tag }}

  # AWS EC2 Settings
  DEV_EC2_KEY: ${{ secrets.DEV_EC2_KEY }}
  DEV_EC2_IP: ${{ secrets.DEV_EC2_IP }}
  DEV_EC2_NAME: ${{ secrets.DEV_EC2_NAME }}
  DEV_EC2_PORT: ${{ secrets.DEV_EC2_PORT }}
  DEV_EC2_PATH: ${{ secrets.DEV_EC2_PATH }}

jobs:
  # admin-test-and-fomat-lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Create env file
  #       run: |
  #         touch .env.admin
  #         echo "${{ env.DJANGO_TEST_ADMIN_ENV }}" >> .env.admin
  #         mv .env.admin admin/

  #     - name: Move setup.cfg
  #       run: mv setup.cfg admin/

  #     - name: Build docker
  #       run: docker compose -f github-actions.docker-compose.yml build postgres admin

  #     - name: Run isort
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run isort mung_manager/ --check

  #     - name: Run black
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run black mung_manager/ --check

  #     - name: Run flake8
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run flake8

  #     - name: Run mypy
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run mypy --config mypy.ini mung_manager/

  #     - name: Run tests
  #       run: docker compose -f github-actions.docker-compose.yml run admin poetry run pytest --cov=mung_manager/ --cov-fail-under=80 tests/ -n 4

  admin-deploy:
    runs-on: ubuntu-latest
    # needs: admin-test-and-fomat-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create env file
        run: |
          touch .env.admin
          echo "${{ env.DJANGO_TEST_ADMIN_ENV }}" >> .env.admin
          mv .env.admin admin/

      - name: AWS configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./admin/docker/dev.Dockerfile
          platforms: linux/x86_64
          push: true
          tags: |
            ${{ steps.login-ecr-public.outputs.registry }}/${{ env.ECR_PUBLIC_REGISTRY_ALIAS }}/${{ env.ADMIN_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ steps.login-ecr-public.outputs.registry }}/${{ env.ECR_PUBLIC_REGISTRY_ALIAS }}/${{ env.ADMIN_ECR_REPOSITORY }}:latest

      - name: Create admin-deploy.sh
        run: |
          sed -i "s%<WEB_APP_IMAGE>%${{ steps.login-ecr-public.outputs.registry }}/${{ env.ECR_PUBLIC_REGISTRY_ALIAS }}/${{ env.WEB_APP_ECR_REPOSITORY }}:latest%g" ./docker-compose.yml
          sed -i "s%<ADMIN_IMAGE>%${{ steps.login-ecr-public.outputs.registry }}/${{ env.ECR_PUBLIC_REGISTRY_ALIAS }}/${{ env.ADMIN_ECR_REPOSITORY }}:latest%g" ./docker-compose.yml
          sed -i "s%<DJANGO_SETTINGS_MODULE>%config.django.dev%g" ./docker-compose.yml
          touch admin-deploy.sh
          echo "#!/bin/bash" >> admin-deploy.sh
          echo "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr-public.outputs.registry }}/${{ env.ECR_PUBLIC_REGISTRY_ALIAS }}" >> admin-deploy.sh
          echo "sudo docker stop admin" >> admin-deploy.sh
          echo "sudo docker rm admin" >> admin-deploy.sh
          echo "sudo docker rmi $(sudo docker images | grep ${{ steps.login-ecr-public.outputs.registry }}/${{ env.ECR_PUBLIC_REGISTRY_ALIAS }}/${{ env.ADMIN_ECR_REPOSITORY }}:latest | awk '{print $3}')" >> admin-deploy.sh
          echo "sudo docker compose -f /home/ubuntu/docker-compose.yml up -d --build admin" >> admin-deploy.sh
          echo "sudo docker compose restart nginx" >> admin-deploy.sh

      - name: Upload to S3
        run: |
          zip -r admin-deploy-${{ env.IMAGE_TAG }}.zip admin-deploy.sh docker-compose.yml ./nginx
          aws s3 cp --region ap-northeast-2 --acl private ./admin-deploy-${{ env.IMAGE_TAG }}.zip s3://mung-manager-deploy/dev/admin

      - name: Connect to SSH and AWS Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          key: ${{ env.DEV_EC2_KEY }}
          host: ${{ env.DEV_EC2_IP }}
          username: ${{ env.DEV_EC2_NAME }}
          port: ${{ env.DEV_EC2_PORT }}
          script: |
            cd ${{ env.DEV_EC2_PATH }}
            aws s3 cp --region ap-northeast-2 s3://mung-manager-deploy/dev/admin/admin-deploy-${{ env.IMAGE_TAG }}.zip .
            unzip admin-deploy-${{ env.IMAGE_TAG }}.zip
            sudo chmod +x admin-deploy.sh
            ./admin-deploy.sh
            sudo rm -rf admin-deploy-${{ env.IMAGE_TAG }}.zip

      - name: Notify Slack on Success
        if: success()
        id: slack-success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#36a64f",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action ADMIN DEV-CD 성공 😄",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify Slack on Failure
        if: failure()
        id: slack-failure
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "attachments": [
                {
                  "color": "#ff0000",
                  "title": "${{ github.repository }}",
                  "title_link": "https://github.com/${{github.repository}}",
                  "text": "GitHub Action ADMIN DEV-CD 실패 😭",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
